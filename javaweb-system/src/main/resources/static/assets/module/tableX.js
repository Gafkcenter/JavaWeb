/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/tableX.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/tableX.js":
/*!**************************!*\
  !*** ./src/js/tableX.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("﻿/** 表格扩展模块 date:2020-02-29   License By http://easyweb.vip */\r\nlayui.define(['layer', 'table', 'laytpl', 'contextMenu'], function (exports) {\r\n    var $ = layui.jquery;\r\n    var layer = layui.layer;\r\n    var table = layui.table;\r\n    var laytpl = layui.laytpl;\r\n    var contextMenu = layui.contextMenu;\r\n    var device = layui.device();\r\n    var tbSearchAttr = 'tb-search';  // 前端搜索属性\r\n    var tbRefreshAttr = 'tb-refresh';  // 刷新按钮属性\r\n    var tbExportAttr = 'tb-export';  // 导出按钮属性\r\n    var txFieldPre = 'txField_';  // templte列filed前缀\r\n    var tableX = {};\r\n\r\n    /* 合并相同单元格 */\r\n    tableX.merges = function (tableId, indexs, fields, sort) {\r\n        if (typeof fields === 'boolean') {\r\n            sort = fields;\r\n            fields = undefined;\r\n        }\r\n        var $tb = $('[lay-filter=\"' + tableId + '\"]+.layui-table-view>.layui-table-box>.layui-table-body>table');\r\n        var $trs = $tb.find('>tbody>tr');\r\n        // 循环合并每一列\r\n        for (var i = 0; i < indexs.length; i++) {\r\n            if (fields) {\r\n                merge(tableId, indexs[i], fields[i]);\r\n            } else {\r\n                merge(tableId, indexs[i]);\r\n            }\r\n        }\r\n        $trs.find('[del=\"true\"]').remove();  // 移除多余的单元格\r\n        // 监听排序事件\r\n        if (sort === undefined || sort) {\r\n            table.on('sort(' + tableId + ')', function () {\r\n                tableX.merges(tableId, indexs, fields, false);\r\n            });\r\n        }\r\n\r\n        // 合并一列\r\n        function merge(tableId, index, field) {\r\n            var data = table.cache[tableId];\r\n            if (data.length > 0) {\r\n                var lastValue, spanNum = 1;\r\n                if (field) {\r\n                    lastValue = data[0][field];\r\n                } else {\r\n                    lastValue = $trs.eq(0).find('td').eq(index).find('.layui-table-cell').html();\r\n                }\r\n                for (var i = 1; i < data.length; i++) {\r\n                    var currentValue;\r\n                    if (field) {\r\n                        currentValue = data[i][field];\r\n                    } else {\r\n                        currentValue = $trs.eq(i).find('td').eq(index).find('.layui-table-cell').html();\r\n                    }\r\n                    if (currentValue === lastValue) {\r\n                        spanNum++;\r\n                        if (i === data.length - 1) {\r\n                            $trs.eq(i - spanNum + 1).find('td').eq(index).attr('rowspan', spanNum);\r\n                            for (var j = 1; j < spanNum; j++) {\r\n                                $trs.eq(i - j + 1).find('td').eq(index).attr('del', 'true');\r\n                            }\r\n                        }\r\n                    } else {\r\n                        $trs.eq(i - spanNum).find('td').eq(index).attr('rowspan', spanNum);\r\n                        for (var k = 1; k < spanNum; k++) {\r\n                            $trs.eq(i - k).find('td').eq(index).attr('del', 'true');\r\n                        }\r\n                        spanNum = 1;\r\n                        lastValue = currentValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /* 表格行绑定鼠标右键 */\r\n    tableX.bindCtxMenu = function (tableId, items) {\r\n        var data = table.cache[tableId];\r\n        var elem = '#' + tableId + '+.layui-table-view .layui-table-body tr';\r\n        $(elem).bind('contextmenu', function (event) {\r\n            var $this = $(this);\r\n            $(elem).removeClass('layui-table-click');\r\n            $this.addClass('layui-table-click');\r\n            var ctxItems;\r\n            if (typeof items === 'function') ctxItems = items(data[$this.data('index')], event.currentTarget);\r\n            else ctxItems = items;\r\n\r\n            function getCtxItems(menus) {\r\n                if (!menus) return;\r\n                var result = [];\r\n                for (var i = 0; i < menus.length; i++) {\r\n                    result.push({\r\n                        icon: menus[i].icon,\r\n                        name: menus[i].name,\r\n                        _click: menus[i].click,\r\n                        click: function (e, e2) {\r\n                            var $tr = $(e2.currentTarget);\r\n                            this._click && this._click(data[$tr.data('index')], e2.currentTarget);\r\n                            $tr.removeClass('layui-table-click');\r\n                        },\r\n                        subs: getCtxItems(menus[i].subs)\r\n                    });\r\n                }\r\n                return result;\r\n            }\r\n\r\n            contextMenu.show(getCtxItems(ctxItems), event.clientX, event.clientY, event);\r\n            return false;\r\n        });\r\n    };\r\n\r\n    /* 导出任意数据 */\r\n    tableX.exportData = function (param) {\r\n        var cols = param.cols;  // 表头\r\n        var data = param.data;  // 数据\r\n        var fileName = param.fileName;  // 文件名\r\n        var fileType = param.expType;  // 类型，xls、csv\r\n        var option = param.option;  // url方式加载的配置\r\n        option || (option = {});\r\n        if (device.ie) return layer.msg('不支持ie导出');\r\n        // data为url先请求数据\r\n        if (typeof data === 'string') {\r\n            var loadIndex = layer.load(2);\r\n            option.url = data;\r\n            tableX.loadUrl(option, function (res) {\r\n                layer.close(loadIndex);\r\n                param.data = res;\r\n                tableX.exportData(param);\r\n            });\r\n            return;\r\n        }\r\n        // 列参数补全\r\n        for (var i = 0; i < cols.length; i++) {\r\n            for (var j = 0; j < cols[i].length; j++) {\r\n                if (cols[i][j].type === undefined) {\r\n                    cols[i][j].type = 'normal';\r\n                }\r\n                if (cols[i][j].hide === undefined) {\r\n                    cols[i][j].hide = false;\r\n                }\r\n            }\r\n        }\r\n        var titles = [], fields = [], expData = [];\r\n        // 获取表头和表头字段名\r\n        table.eachCols(undefined, function (i, item) {\r\n            if (item.type === 'normal' && !item.hide) {\r\n                titles.push(item.title || '');\r\n                fields.push(item.field || (txFieldPre + i));\r\n            }\r\n        }, cols);\r\n        // 获取templet后的数据\r\n        var fullData = tableX.parseTbData(cols, tableX.deepClone(data), true);\r\n        for (var n = 0; n < fullData.length; n++) {\r\n            var rowItem = [];\r\n            for (var m = 0; m < fields.length; m++) {\r\n                var text = fullData[n][fields[m]];\r\n                text && (text = text.toString().replace(/,/g, '，'));\r\n                rowItem.push(text);\r\n            }\r\n            expData.push(rowItem.join(','));\r\n        }\r\n        // 创建下载文件的a标签\r\n        var alink = document.createElement('a');\r\n        var type = ({csv: 'text/csv', xls: 'application/vnd.ms-excel'})[fileType || 'xls'];\r\n        var content = encodeURIComponent(titles.join(',') + '\\r\\n' + expData.join('\\r\\n'));\r\n        alink.href = 'data:' + type + ';charset=utf-8,\\ufeff' + content;\r\n        alink.download = (fileName || 'table') + '.' + (fileType || 'xls');\r\n        document.body.appendChild(alink);\r\n        alink.click();\r\n        document.body.removeChild(alink);\r\n    };\r\n\r\n    /* 导出表格数据(高级) */\r\n    tableX.exportDataX = function (param) {\r\n        layui.use('excel', function () {\r\n            var excel = layui.excel;\r\n            var cols = param.cols;  // 表头\r\n            var data = param.data;  // 数据\r\n            var fileName = param.fileName;  // 文件名\r\n            var fileType = param.expType;  // 类型，xls、xlsx\r\n            var option = param.option;  // url方式加载的配置\r\n            option || (option = {});\r\n            fileType || (fileType = 'xlsx');\r\n            // data为url先请求数据\r\n            if (data && typeof data === 'string') {\r\n                var loadIndex = layer.load(2);\r\n                option.url = data;\r\n                tableX.loadUrl(option, function (res) {\r\n                    layer.close(loadIndex);\r\n                    param.data = res;\r\n                    tableX.exportDataX(param);\r\n                });\r\n                return;\r\n            }\r\n            // 列参数补全\r\n            for (var i = 0; i < cols.length; i++) {\r\n                for (var j = 0; j < cols[i].length; j++) {\r\n                    if (cols[i][j].type === undefined) {\r\n                        cols[i][j].type = 'normal';\r\n                    }\r\n                    if (cols[i][j].hide === undefined) {\r\n                        cols[i][j].hide = false;\r\n                    }\r\n                }\r\n            }\r\n            // 获取表头和表头字段名\r\n            var titles = {}, fields = [];\r\n            table.eachCols(undefined, function (i, item) {\r\n                if (item.type === 'normal' && !item.hide) {\r\n                    var field = item.field || (txFieldPre + i);\r\n                    fields.push(field);\r\n                    titles[field] = item.title || '';\r\n                }\r\n            }, cols);\r\n            // 格式化数据\r\n            var fullData = tableX.parseTbData(cols, tableX.deepClone(data), true);\r\n            var expData = excel.filterExportData(fullData, fields);\r\n            expData.unshift(titles);\r\n            excel.exportExcel({sheet1: expData}, (fileName || 'table') + '.' + fileType, fileType);\r\n        });\r\n    };\r\n\r\n    /* 后端导出数据拼接参数 */\r\n    tableX.exportDataBack = function (url, where, method) {\r\n        where || (where = {});\r\n        if (!method || method.toString().toLowerCase() === 'get') {\r\n            var param = '';\r\n            for (var f in where) {\r\n                if (!param) {\r\n                    param = ('?' + f + '=' + where[f]);\r\n                } else {\r\n                    param += ('&' + f + '=' + where[f]);\r\n                }\r\n            }\r\n            window.open(url + param);\r\n        } else {\r\n            var htmlStr = '<html><body><form id=\"eFrom\" action=\"' + url + '\" method=\"' + method + '\">';\r\n            for (var f2 in where) {\r\n                htmlStr += ('<textarea name=\"' + f2 + '\">' + where[f2] + '</textarea>');\r\n            }\r\n            htmlStr += '</form></body></html>';\r\n            $('#exportFrame').remove();\r\n            $('body').append('<iframe id=\"exportFrame\" style=\"display: none;\"></iframe>');\r\n            var eFrame = document.getElementById('exportFrame');\r\n            var eWindow = eFrame.contentWindow;\r\n            var eDocument = eWindow.document;\r\n            eWindow.focus();\r\n            eDocument.open();\r\n            eDocument.write(htmlStr);\r\n            eDocument.close();\r\n            eDocument.getElementById('eFrom').submit();\r\n        }\r\n    };\r\n\r\n    /* 渲染表格，后端排序 */\r\n    tableX.render = function (param) {\r\n        var tableId = $(param.elem).attr('lay-filter');\r\n        param.autoSort = false;  // 关闭默认排序\r\n        var insTb = table.render(param);  // 渲染表格\r\n        // 排序监听\r\n        table.on('sort(' + tableId + ')', function (obj) {\r\n            var sortField = obj.field, sortType = obj.type; // 排序字段、类型\r\n            var sortWhere = $.extend(param.where, {sort: sortField, order: sortType});\r\n            insTb.reload({where: sortWhere, page: {curr: 1}});\r\n        });\r\n        return insTb;\r\n    };\r\n\r\n    /* 渲染表格，前端分页 */\r\n    tableX.renderFront = function (param) {\r\n        var insTb, tableId = $(param.elem).attr('lay-filter');\r\n        param.autoSort = false;  // 关闭默认排序\r\n        // 没有field的templet列补上，因为排序必须有filed字段，否则点击排序会报错\r\n        for (var i = 0; i < param.cols.length; i++) {\r\n            for (var j = 0; j < param.cols[i].length; j++) {\r\n                if (param.cols[i][j].templet && !param.cols[i][j].field) {\r\n                    param.cols[i][j].field = txFieldPre + i + '_' + j;\r\n                }\r\n            }\r\n        }\r\n        if (param.url) {  // url方式\r\n            var xParam = tableX.deepClone(param);\r\n            xParam.data = [];\r\n            xParam.url = undefined;\r\n            insTb = table.render(xParam);  // 先渲染表格结构\r\n            // 提供刷新方法\r\n            insTb.reloadUrl = function (p) {\r\n                var reParam = tableX.deepClone(param);\r\n                p && (reParam = $.extend(reParam, p));\r\n                $(param.elem + '+.layui-table-view>.layui-table-box').append('<div class=\"layui-table-init\"><i class=\"layui-icon layui-icon-loading layui-anim layui-anim-rotate layui-anim-loop\"></i></div>');\r\n                // 获取url数据\r\n                tableX.loadUrl(reParam, function (data) {\r\n                    insTb.reload({url: '', data: data, page: {curr: 1}});\r\n                    tableX.putTbData(tableId, tableX.parseTbData(reParam.cols, data));  // 缓存数据\r\n                    $('input[' + tbSearchAttr + '=\"' + tableId + '\"]').val('');  // 清空搜索输入框\r\n                    window.tbX.cacheSearch[tableId] = undefined;  // 重置搜索结果\r\n                });\r\n            };\r\n            insTb.reloadUrl();\r\n        } else {\r\n            insTb = table.render(param);  // 渲染表格\r\n            // 提供刷新的方法\r\n            insTb.reloadData = function (p) {\r\n                insTb.reload(p);\r\n                tableX.parseTbData(param.cols, p.data);  // 解析temple列\r\n                tableX.putTbData(tableId, p.data);\r\n                $('input[' + tbSearchAttr + '=\"' + tableId + '\"]').val('');  // 清空搜索输入框\r\n                window.tbX.cacheSearch[tableId] = undefined;  // 重置搜索结果\r\n            };\r\n            tableX.putTbData(tableId, tableX.parseTbData(param.cols, param.data));  // 缓存数据\r\n        }\r\n        tableX.renderAllTool(insTb);  // 渲染工具组件\r\n        return insTb;\r\n    };\r\n\r\n    /* 加载表格数据 */\r\n    tableX.loadUrl = function (options, callback) {\r\n        // 响应数据的自定义格式\r\n        options.response = $.extend({\r\n            statusName: 'code',\r\n            statusCode: 0,\r\n            msgName: 'msg',\r\n            dataName: 'data',\r\n            countName: 'count'\r\n        }, options.response);\r\n        var response = options.response;\r\n        var where = options.where;   // 参数\r\n        if (options.contentType && options.contentType.indexOf('application/json') === 0) {\r\n            where = JSON.stringify(where);  // 提交 json 格式\r\n        }\r\n        $.ajax({\r\n            type: options.method || 'get',\r\n            url: options.url,\r\n            contentType: options.contentType,\r\n            data: where,\r\n            dataType: 'json',\r\n            headers: options.headers || {},\r\n            success: function (res) {\r\n                // 如果有数据解析的回调，则获得其返回的数据\r\n                if (typeof options.parseData === 'function') {\r\n                    res = options.parseData(res) || res;\r\n                }\r\n                // 检查数据格式是否符合规范\r\n                if (res[response.statusName] != response.statusCode) {\r\n                    var msgText = res[response.msgName] || ('返回的数据不符合规范，正确的成功状态码 (' + response.statusName + ') 应为：' + response.statusCode);\r\n                    layer.msg(msgText, {icon: 2});\r\n                } else {\r\n                    callback(res[response.dataName]);\r\n                }\r\n            },\r\n            error: function (e, m) {\r\n                layer.msg('数据接口请求异常：' + m, {icon: 2});\r\n            }\r\n        });\r\n    };\r\n\r\n    /* 解析数据表格templet列 */\r\n    tableX.parseTbData = function (cols, dataList, overwrite) {\r\n        var templets = [];  // 需要解析的列\r\n        table.eachCols(undefined, function (i, item) {\r\n            if (item.templet) {\r\n                var one = {field: ((item.field && (overwrite || item.field.indexOf(txFieldPre) === 0)) ? item.field : ('txField_' + i))};\r\n                if (typeof item.templet === 'string') {\r\n                    one.templet = function (d) {  // templet列使用laytpl渲染\r\n                        var rsStr = undefined;\r\n                        laytpl($(item.templet).html()).render(d, function (html) {\r\n                            rsStr = html;\r\n                        });\r\n                        return rsStr;\r\n                    }\r\n                } else {\r\n                    one.templet = item.templet;\r\n                }\r\n                templets.push(one);\r\n            }\r\n        }, cols);\r\n        for (var i = 0; i < dataList.length; i++) {\r\n            var current = dataList[i];\r\n            for (var j = 0; j < templets.length; j++) {\r\n                var htmlStr = '<div>' + templets[j].templet(current) + '</div>';\r\n                current[templets[j].field] = $(htmlStr).not('.export-hide').text().replace(/(^\\s*)|(\\s*$)/g, '');  // 去除前后空格\r\n            }\r\n        }\r\n        return dataList;\r\n    };\r\n\r\n    /* 缓存表格的数据 */\r\n    tableX.putTbData = function (tableId, dataList) {\r\n        window.tbX.cache[tableId] = dataList;\r\n    };\r\n\r\n    /* 获取表格缓存的数据 */\r\n    tableX.getTbData = function (tableId) {\r\n        var dataList = window.tbX.cache[tableId];\r\n        return tableX.deepClone(dataList || table.cache[tableId]);\r\n    };\r\n\r\n    /* 搜索数据 */\r\n    tableX.filterData = function (dataList, searchName, searchValue) {\r\n        var newList = [], sfs;\r\n        for (var i = 0; i < dataList.length; i++) {\r\n            var obj = dataList[i];\r\n            if (!sfs) {  // 搜索的字段\r\n                if (!searchName) {\r\n                    sfs = [];\r\n                    for (var f in obj) {\r\n                        if (!obj.hasOwnProperty(f)) continue;\r\n                        sfs.push(f);\r\n                    }\r\n                } else {\r\n                    sfs = searchName.split(',');\r\n                }\r\n            }\r\n            for (var j = 0; j < sfs.length; j++) {\r\n                if (tableX.isContains(obj[sfs[j]], searchValue)) {\r\n                    newList.push(obj);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return newList;\r\n    };\r\n\r\n    /* 字符串是否包含 */\r\n    tableX.isContains = function (str1, str2) {\r\n        str1 || (str1 = '');\r\n        str2 || (str2 = '');\r\n        str1 = str1.toString().toLowerCase();\r\n        str2 = str2.toString().toLowerCase();\r\n        if (str1 === str2 || str1.indexOf(str2) >= 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /* 渲染所有组件 */\r\n    tableX.renderAllTool = function (insTb) {\r\n        renderRefresh(insTb);  // 刷新\r\n        renderFrontSort(insTb);  // 排序\r\n        renderFrontSearch(insTb);  // 搜索\r\n        renderExport(insTb);  // 导出\r\n    };\r\n\r\n    /* 深度克隆对象 */\r\n    tableX.deepClone = function (obj) {\r\n        var result;\r\n        var oClass = tableX.isClass(obj);\r\n        if (oClass === 'Object') {\r\n            result = {};\r\n        } else if (oClass === 'Array') {\r\n            result = [];\r\n        } else {\r\n            return obj;\r\n        }\r\n        for (var key in obj) {\r\n            if (!obj.hasOwnProperty(key)) continue;\r\n            var copy = obj[key];\r\n            if (tableX.isClass(copy) === 'Object') {\r\n                result[key] = arguments.callee(copy);//递归调用\r\n            } else if (tableX.isClass(copy) === 'Array') {\r\n                result[key] = arguments.callee(copy);\r\n            } else {\r\n                result[key] = obj[key];\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /* 获取变量类型 */\r\n    tableX.isClass = function (o) {\r\n        if (o === null)\r\n            return 'Null';\r\n        if (o === undefined)\r\n            return 'Undefined';\r\n        return Object.prototype.toString.call(o).slice(8, -1);\r\n    };\r\n\r\n    // 创建数据缓存对象\r\n    window.tbX || (window.tbX = {});\r\n    window.tbX.cache || (window.tbX.cache = {});\r\n    window.tbX.cacheSearch || (window.tbX.cacheSearch = {});\r\n\r\n    // 前端搜索\r\n    var renderFrontSearch = function (insTb) {\r\n        var tableId = insTb.config.id, $input = $('input[' + tbSearchAttr + '=\"' + tableId + '\"]');\r\n        if (!($input && $input.length > 0)) {\r\n            return;\r\n        }\r\n        if (!$input.attr('placeholder')) {\r\n            $input.attr('placeholder', '输入关键字按回车键搜索');\r\n        }\r\n        $input.off('keydown').on('keydown', function (event) {\r\n            if (event.keyCode !== 13) {\r\n                return;\r\n            }\r\n            var searchName = $input.attr('name');  // 搜索的字段名，用逗号分隔\r\n            var searchValue = $input.val().replace(/(^\\s*)|(\\s*$)/g, '');  // 搜索关键字\r\n            var loadIndex = layer.msg('搜索中..', {icon: 16, shade: 0.01, time: 0});\r\n            var dataList = tableX.getTbData(tableId);\r\n            var newDataList = tableX.filterData(dataList, searchName, searchValue);\r\n            window.tbX.cacheSearch[tableId] = newDataList;  // 缓存搜索后的数据用于排序\r\n            insTb.reload({url: '', data: newDataList, page: {curr: 1}});\r\n            layer.close(loadIndex);\r\n        });\r\n    };\r\n\r\n    // 前端排序\r\n    var renderFrontSort = function (insTb) {\r\n        var tableId = insTb.config.id;\r\n        table.on('sort(' + tableId + ')', function (obj) {\r\n            var sortField = obj.field, sortType = obj.type; // 排序字段、类型\r\n            var loadIndex = layer.msg('加载中..', {icon: 16, shade: 0.01, time: 0});\r\n            var dataList = window.tbX.cacheSearch[tableId];  // 表格搜索后的数据\r\n            dataList || (dataList = tableX.getTbData(tableId));\r\n            if (sortType) {\r\n                dataList = dataList.sort(function (o1, o2) {\r\n                    var o1Str = o1[sortField], o2Str = o2[sortField];\r\n                    if (sortType === 'asc') {  // 升序\r\n                        return (o1Str === o2Str) ? 0 : ((o1Str < o2Str) ? -1 : 1);\r\n                    } else {  // 降序\r\n                        return (o1Str === o2Str) ? 0 : ((o1Str < o2Str) ? 1 : -1);\r\n                    }\r\n                });\r\n            }\r\n            insTb.reload({initSort: obj, url: '', data: dataList, page: {curr: 1}});\r\n            layer.close(loadIndex);\r\n        });\r\n    };\r\n\r\n    // 表格刷新按鈕\r\n    var renderRefresh = function (insTb) {\r\n        $('[' + tbRefreshAttr + '=\"' + insTb.config.id + '\"]').off('click').on('click', function () {\r\n            if (insTb.reloadUrl) {\r\n                insTb.reloadUrl();\r\n            } else {\r\n                insTb.reload({page: {curr: 1}});\r\n            }\r\n        });\r\n    };\r\n\r\n    // 渲染导出按钮\r\n    var renderExport = function (insTb) {\r\n        var tableId = insTb.config.id;\r\n        $('[' + tbExportAttr + '=\"' + tableId + '\"]').off('click').on('click', function (event) {\r\n            if ($(this).find('.tbx-dropdown-menu').length > 0) {\r\n                return;\r\n            }\r\n            if (event !== void 0) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n            var htmlStr = '<div class=\"tbx-dropdown-menu\">';\r\n            htmlStr += '      <div class=\"tbx-dropdown-menu-item\" data-type=\"check\">导出选中数据</div>';\r\n            htmlStr += '      <div class=\"tbx-dropdown-menu-item\" data-type=\"current\">导出当前页数据</div>';\r\n            htmlStr += '      <div class=\"tbx-dropdown-menu-item\" data-type=\"all\">导出全部数据</div>';\r\n            htmlStr += '   </div>';\r\n            $(this).append(htmlStr);\r\n            $(this).addClass('tbx-dropdown-btn');\r\n            $(this).parent().css('position', 'relative');\r\n            $(this).parent().css('z-index', '9998');\r\n            $('.tbx-dropdown-menu').off('click').on('click', '.tbx-dropdown-menu-item', function (event) {\r\n                var type = $(this).data('type');\r\n                if (type === 'check') {\r\n                    var checkRows = table.checkStatus(tableId);\r\n                    if (checkRows.data.length === 0) {\r\n                        layer.msg('请选择要导出的数据', {icon: 2});\r\n                    } else {\r\n                        $('.tbx-dropdown-menu').remove();\r\n                        tableX.exportData({\r\n                            fileName: insTb.config.title,\r\n                            cols: insTb.config.cols,\r\n                            data: checkRows.data\r\n                        });\r\n                    }\r\n                } else if (type === 'current') {\r\n                    tableX.exportData({\r\n                        fileName: insTb.config.title,\r\n                        cols: insTb.config.cols,\r\n                        data: table.cache[tableId]\r\n                    });\r\n                } else if (type === 'all') {\r\n                    tableX.exportData({\r\n                        fileName: insTb.config.title,\r\n                        cols: insTb.config.cols,\r\n                        data: tableX.getTbData(tableId)\r\n                    });\r\n                }\r\n                if (event !== void 0) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n        $(document).off('click.tbxDropHide').on('click.tbxDropHide', function () {\r\n            $('.tbx-dropdown-menu').remove();\r\n        });\r\n    };\r\n\r\n    /* css样式 */\r\n    var getCommonCss = function () {\r\n        var cssStr = '.tbx-dropdown-btn {';\r\n        cssStr += '        position: relative;';\r\n        cssStr += '   }';\r\n        cssStr += '   .tbx-dropdown-btn:hover {';\r\n        cssStr += '        opacity: 1';\r\n        cssStr += '   }';\r\n        cssStr += '   .tbx-dropdown-menu {';\r\n        cssStr += '        position: absolute;';\r\n        cssStr += '        top: 100%;';\r\n        cssStr += '        right: 0;';\r\n        cssStr += '        padding: 5px 0;';\r\n        cssStr += '        margin: 5px 0 0 0;';\r\n        cssStr += '        overflow: visible;';\r\n        cssStr += '        min-width: 110px;';\r\n        cssStr += '        background: #fff;';\r\n        cssStr += '        border-radius: 2px;';\r\n        cssStr += '        box-shadow: 0 2px 4px rgba(0, 0, 0, .12);';\r\n        cssStr += '        border: 1px solid #d2d2d2;';\r\n        cssStr += '        z-index: 9998;';\r\n        cssStr += '        cursor: default;';\r\n        cssStr += '   }';\r\n        cssStr += '   .tbx-dropdown-menu .tbx-dropdown-menu-item {';\r\n        cssStr += '        display: block;';\r\n        cssStr += '        color: #555;';\r\n        cssStr += '        font-size: 14px;';\r\n        cssStr += '        padding: 10px 15px;';\r\n        cssStr += '        text-decoration: none;';\r\n        cssStr += '        white-space: nowrap;';\r\n        cssStr += '        cursor: pointer;';\r\n        cssStr += '        user-select: none;';\r\n        cssStr += '        line-height: normal;';\r\n        cssStr += '   }';\r\n        cssStr += '   .tbx-dropdown-menu .tbx-dropdown-menu-item:hover {';\r\n        cssStr += '        background-color: #eeeeee;';\r\n        cssStr += '   }';\r\n        cssStr += '   .export-show {';\r\n        cssStr += '        display: none;';\r\n        cssStr += '   }';\r\n        return cssStr;\r\n    };\r\n\r\n    $('head').append('<style id=\"ew-css-tbx\" type=\"text/css\">' + getCommonCss() + '</style>');\r\n    exports(\"tableX\", tableX);\r\n});\n\n//# sourceURL=webpack:///./src/js/tableX.js?");

/***/ }),

/***/ "./src/tableX.js":
/*!***********************!*\
  !*** ./src/tableX.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿__webpack_require__(/*! ./js/tableX.js */ \"./src/js/tableX.js\");\n\n//# sourceURL=webpack:///./src/tableX.js?");

/***/ })

/******/ });