/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/func.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/func.js":
/*!*********************!*\
  !*** ./src/func.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./js/func.js */ \"./src/js/func.js\");\n\n//# sourceURL=webpack:///./src/func.js?");

/***/ }),

/***/ "./src/js/func.js":
/*!************************!*\
  !*** ./src/js/func.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * 常用方法封装【方法调用类】\r\n * @author 牧羊人\r\n * @date 2018/7/12\r\n */\r\nlayui.define(['form', 'layer', 'table', 'common', 'treeTable'], function (exports) {\r\n    \"use strict\";\r\n\r\n    var form = layui.form,\r\n        table = layui.table,\r\n        layer = layui.layer,\r\n        common = layui.common,\r\n        treeTable = layui.treeTable,\r\n        $ = layui.$;\r\n\r\n    /**\r\n     * 声明全局变量\r\n     */\r\n    var _tableIns,\r\n        _tableName,\r\n        _callback,\r\n        _title,\r\n        _width = 0,\r\n        _height = 0,\r\n        _isDbclick;\r\n\r\n    /**\r\n     * 自定义模块接口对象\r\n     */\r\n    var func = {\r\n\r\n        /**\r\n         * TABLE列表函数\r\n         */\r\n        tableIns: function (cols, tableName, callback = null, url = '', tableSort = false) {\r\n            _tableName = tableName;\r\n            _callback = callback;\r\n\r\n            // 初始化网络请求URL\r\n            if (!url || url == '') {\r\n                url = cUrl + \"/list\";\r\n            }\r\n\r\n            // 初始化网络请求参数\r\n            var param = $(\"#param\").val();\r\n            if (param) {\r\n                param = JSON.parse(param);\r\n                if ($.isArray(param)) {\r\n                    for (var i in param) {\r\n                        if (url.indexOf(\"?\") >= 0) {\r\n                            // 包含?\r\n                            url += \"&\" + param[i];\r\n                        } else {\r\n                            // 不包含?\r\n                            url += \"?\" + param[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 初始化TABLE组件\r\n            _tableIns = table.render({\r\n                elem: \"#\" + _tableName\r\n                , url: url\r\n                // , toolbar: '#toolbar_header'\r\n                // , title: '用户数据表'\r\n                // , totalRow: true\r\n                , method: 'post'\r\n                , cellMinWidth: 150\r\n                // , page: true\r\n                , page: {\r\n                    // 限定条数   总数、计数  上一页     页     下一页    到第几页、跳\r\n                    layout: ['refresh', 'prev', 'page', 'next', 'skip', 'count', 'limit'] //自定义分页布局\r\n                    , curr: 1\r\n                    , groups: 10 //显示 连续页码\r\n                    , first: '首页'\r\n                    , last: '尾页'\r\n                }\r\n                // //初始排序\r\n                // , initSort: {\r\n                //     field: 'id', //排序字段，对应 cols 设定的各字段名\r\n                //     type: 'desc' //排序方式  asc: 升序、desc: 降序、null: 默认排序\r\n                // }\r\n                , height: \"full-100\"\r\n                , limit: 20\r\n                , limits: [20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 1000]\r\n                , even: true // 开启隔行背景\r\n                , cols: [cols]\r\n                , loading: true\r\n                , done: function (res, curr, count) {\r\n                    // 新增监听table行双击事件\r\n                    if (_isDbclick) {\r\n                        var tbody = $('.layui-table-body').find(\"table\").find(\"tbody\");\r\n                        var tr = tbody.children(\"tr\");\r\n                        tr.on('dblclick', function () {\r\n                            var index = tbody.find(\".layui-table-hover\").data('index');\r\n                            var obj = res.data[index];\r\n                            common.edit(_title, obj.id, _width, _height);\r\n                        });\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            // 监听头工具栏事件\r\n            table.on(\"toolbar(\" + _tableName + \")\", function (obj) {\r\n                var checkStatus = table.checkStatus(obj.config.id);\r\n                switch (obj.event) {\r\n                    case 'getCheckData':\r\n                        var data = checkStatus.data;\r\n                        layer.alert(JSON.stringify(data));\r\n                        break;\r\n                    case 'getCheckLength':\r\n                        var data = checkStatus.data;\r\n                        layer.msg('选中了：' + data.length + ' 个');\r\n                        break;\r\n                    case 'isAll':\r\n                        layer.msg(checkStatus.isAll ? '全选' : '未全选');\r\n                        break;\r\n                }\r\n                ;\r\n            });\r\n\r\n            // 监听行工具事件\r\n            table.on(\"tool(\" + _tableName + \")\", function (obj) {\r\n                var data = obj.data\r\n                    , layEvent = obj.event;\r\n\r\n                if (layEvent === 'edit') {\r\n                    // 编辑记录\r\n                    common.edit(_title, data.id, _width, _height);\r\n                } else if (layEvent === 'detail') {\r\n                    // 记录详情\r\n                    common.detail(_title, data.id, _width, _height);\r\n                } else if (layEvent === 'del') {\r\n                    // 删除记录\r\n                    common.delete(data.id, function (data, res) {\r\n                        if (res) {\r\n                            obj.del();\r\n                        } else {\r\n                        }\r\n                    });\r\n                } else if (layEvent === 'cache') {\r\n                    // 重置缓存\r\n                    common.cache(data.id);\r\n                } else if (layEvent === 'copy') {\r\n                    // 一键复制\r\n                    common.copy(_title, data.id, _width, _height);\r\n                } else {\r\n                    // 其他操作,函数回调\r\n                    if (_callback) {\r\n                        _callback(layEvent, data);\r\n                    }\r\n                }\r\n            });\r\n\r\n            // 监听复选框\r\n            table.on(\"checkbox(\" + _tableName + \")\", function (obj) {\r\n                // console.log(obj.checked); //当前是否选中状态\r\n                // console.log(obj.data); //选中行的相关数据\r\n                // console.log(obj.type); //如果触发的是全选，则为：all，如果触发的是单选，则为：one\r\n            });\r\n\r\n            // 监听单元格编辑\r\n            table.on('edit(' + _tableName + ')', function (obj) {\r\n                var value = obj.value //得到修改后的值\r\n                    , data = obj.data //得到所在行所有键值\r\n                    , field = obj.field; //得到字段\r\n\r\n                var json_data = {};\r\n                json_data['id'] = data.id;\r\n                json_data[field] = value;\r\n\r\n                // JSON字符串\r\n                var json_str = JSON.stringify(json_data);\r\n\r\n                // JSON数据\r\n                var json = JSON.parse(json_str);\r\n\r\n                // 发起网络请求\r\n                var url = cUrl + \"/update\";\r\n                common.ajaxPost(url, json, function (res, success) {\r\n                    // console.log(\"字段【\" + field + \"】:【\" + value + \"】值更新成功\");\r\n                }, '更新中...');\r\n\r\n            });\r\n\r\n            // 监听行单击事件\r\n            table.on(\"row(\" + _tableName + \")\", function (obj) {\r\n                // 标注选中样式\r\n                obj.tr.addClass('layui-table-click').siblings().removeClass('layui-table-click');\r\n                var data = obj.data;\r\n            });\r\n\r\n            // 监听排序事件\r\n            if (tableSort) {\r\n                table.on(\"sort(\" + _tableName + \")\", function (obj) {\r\n                    // // 当前排序的字段名\r\n                    // console.log(obj.field);\r\n                    // // 当前排序类型：desc(降序)、asc(升序)、null(空对象，默认排序)\r\n                    // console.log(obj.type);\r\n                    // // 当前排序的 th对象\r\n                    // console.log(this);\r\n\r\n                    // 请求服务端进行动态排序\r\n                    table.reload(_tableName, {\r\n                        initSort: obj\r\n                        , where: {\r\n                            field: obj.field //排序字段\r\n                            , order: obj.type //排序方式\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            return this;\r\n\r\n        },\r\n        /**\r\n         * treetable列表函数,\r\n         */\r\n        treetable: function (cols = [], tableName, isExpand = true, treeSpid = 0, treePidName = '', callback = null, url = '') {\r\n            _tableName = tableName;\r\n            // 初始化请求URL\r\n            if (!url) {\r\n                url = cUrl + \"/list\";\r\n            }\r\n\r\n            // 加载treetable\r\n            _tableIns = treeTable.render({\r\n                elem: '#' + tableName, //表格id\r\n                url: url,\r\n                method: \"POST\",\r\n                height: 'full-50',\r\n                cellMinWidth: 80,\r\n                // toolbar: 'default',\r\n                tree: {\r\n                    iconIndex: 1,\r\n                    idName: 'id',\r\n                    pidName: treePidName ? treePidName : \"pid\",\r\n                    isPidData: true\r\n                },\r\n                cols: [cols],\r\n                done: function (res, curr, count) {\r\n                    // // res 可以获取文件的数据，或者是ajax请求的数据\r\n                    // console.log(res);\r\n                    // //得到当前页码\r\n                    // console.log(curr);\r\n                    // //得到数据总量\r\n                    // console.log(count);\r\n                    // 关闭加载\r\n                    layer.closeAll('loading');\r\n                }\r\n            });\r\n\r\n            // 工具条点击事件\r\n            treeTable.on('tool(' + tableName + ')', function (obj) {\r\n                var data = obj.data;\r\n                var layEvent = obj.event;\r\n                // 当前记录ID\r\n                var id = data.id;\r\n                if (layEvent === 'add') {\r\n                    // 添加记录\r\n                    common.edit(_title, 0, _width, _height, ['pid=' + id]);\r\n                } else if (layEvent === 'edit') {\r\n                    // 修改记录\r\n                    common.edit(_title, id, _width, _height);\r\n                } else if (layEvent === 'del') {\r\n                    // 删除记录\r\n                    common.delete(id, function (data, isSuc) {\r\n                        if (isSuc) {\r\n                            obj.del();\r\n                        } else {\r\n                        }\r\n                    });\r\n                } else {\r\n                    // 其他操作(回调函数)\r\n                    if (callback) {\r\n                        callback(layEvent, id, 0);\r\n                    }\r\n                }\r\n            });\r\n\r\n            // 全部收缩\r\n            $('#collapse').on('click', function () {\r\n                treetable.foldAll();\r\n            });\r\n\r\n            // 全部展开\r\n            $('#expand').on('click', function () {\r\n                treetable.expandAll();\r\n            });\r\n\r\n            // 刷新页面\r\n            $('#refresh').on('click', function () {\r\n                treetable.refresh();\r\n            });\r\n\r\n            // 搜索\r\n            $('#search').click(function () {\r\n                var keywords = $('#keywords').val();\r\n                if (keywords) {\r\n                    treetable.filterData(keywords);\r\n                } else {\r\n                    treetable.clearFilter();\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 设置弹窗函数\r\n         */\r\n        setWin: function (title, width = 0, height = 0) {\r\n            _title = title;\r\n            _width = width;\r\n            _height = height;\r\n            return this;\r\n        },\r\n        /**\r\n         * 设置行双击事件\r\n         */\r\n        setDbclick: function (param) {\r\n            _isDbclick = param ? param : true;\r\n            return this;\r\n        },\r\n        /**\r\n         * 模糊搜索函数\r\n         */\r\n        searchForm: function (searchForm, tableList) {\r\n\r\n            // 搜索功能\r\n            form.on(\"submit(\" + searchForm + \")\", function (data) {\r\n                common.searchForm(table, data, tableList);\r\n                return false;\r\n            });\r\n        },\r\n        /**\r\n         * TABLE复选框选中函数\r\n         */\r\n        getCheckData: function (tableName) {\r\n            if (!tableName) {\r\n                tableName = _tableName;\r\n            }\r\n            var checkStatus = table.checkStatus(tableName)\r\n                , data = checkStatus.data;\r\n            return data;\r\n\r\n        },\r\n        /**\r\n         * 初始化日期组件(支持多组件初始化)\r\n         */\r\n        initDate: function (item, callback = null) {\r\n            common.initDate(item, function (value, date) {\r\n                if (callback) {\r\n                    callback(value, date);\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 打开窗体函数\r\n         */\r\n        showWin: function (title, url, width = 0, height = 0, param = [], type = 2, btn = [], callback = null) {\r\n            common.showWin(title, url, width, height, param, type, btn, function (layero, index) {\r\n                if (callback) {\r\n                    callback(layero, index);\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 网络POST请求\r\n         */\r\n        ajaxPost: function (url, data, callback = null, msg = '处理中...') {\r\n            common.ajaxPost(url, data, callback, msg);\r\n        },\r\n        /**\r\n         * Switch开关\r\n         */\r\n        formSwitch: function (name, url = '', callback = null) {\r\n            common.formSwitch(name, url, function (data, res) {\r\n                if (callback) {\r\n                    callback(data, res);\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 上传文件\r\n         */\r\n        uploadFile: function (elem_id, callback = null, url = '', exts = 'xls|xlsx', size = 10240, data = {}) {\r\n            common.uploadFile(elem_id, function (res, isSucc) {\r\n                if (callback) {\r\n                    callback(res, isSucc);\r\n                }\r\n            }, url, exts, size, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 表单验证函数\r\n     */\r\n    common.verify();\r\n\r\n    /**\r\n     * 提交表单\r\n     */\r\n    form.on('submit(submitForm)', function (data) {\r\n        // 带[]中括号下标的字段特殊处理\r\n        var nameArr = [];\r\n        var itemArr = [];\r\n        var param = data.field;\r\n        $.each(param, function (key, val) {\r\n            // 正则验证字段是否存在中括号[]\r\n            var regex = /\\[|\\]|【|】/g\r\n            if (!regex.test(key)) {\r\n                return;\r\n            }\r\n\r\n            // 处理带括号[]的字段\r\n            var regex1 = /\\[(.+?)\\]/g;   // [] 中括号及内容\r\n\r\n            // 获取括号及括号内容\r\n            var content = key.match(regex1);\r\n\r\n            // 获取括号内容值\r\n            var regex2 = \"\\\\[(.+?)\\\\]\";\r\n            var item = key.match(regex2);\r\n            val = item[1];\r\n\r\n            // 获取字段名\r\n            var name = key.replace(content, \"\");\r\n            // 字段名临时存储\r\n            if ($.inArray(name, nameArr) < 0) {\r\n                nameArr.push(name);\r\n            }\r\n\r\n            // 字段名数组初始化\r\n            if (!itemArr[name]) {\r\n                itemArr[name] = [];\r\n            }\r\n            itemArr[name].push(val);\r\n        });\r\n        // 遍历数组\r\n        $.each(nameArr, function (i, name) {\r\n            var item = [];\r\n            $.each(itemArr[name], function (key, val) {\r\n                item.push(val);\r\n                // 移除指定元素\r\n                delete param[name + \"[\" + val + \"]\"];\r\n            });\r\n            param[name] = item.join(\",\");\r\n        });\r\n        common.submitForm(param);\r\n        return false;\r\n    });\r\n\r\n    /**\r\n     * 关键词搜索\r\n     */\r\n    form.on(\"submit(searchForm)\", function (data) {\r\n        common.searchForm(table, data);\r\n        return false;\r\n    });\r\n\r\n    /**\r\n     * 操作按钮\r\n     */\r\n    $(\".btnOption\").click(function () {\r\n\r\n        // 自定义参数\r\n        var param = $(this).attr(\"data-param\");\r\n        if (param != null) {\r\n            param = JSON.parse(param);\r\n        }\r\n        // 选择数据\r\n        var data = func.getCheckData(_tableName);\r\n\r\n        // 事件名称\r\n        var layEvent = $(this).attr('lay-event');\r\n        switch (layEvent) {\r\n            case \"add\": {\r\n                // 添加记录\r\n                common.edit(_title, 0, _width, _height, param);\r\n                break;\r\n            }\r\n            case \"batchDrop\": {\r\n                // 批量删除\r\n\r\n                // 方法参数\r\n                var item = {};\r\n                item['title'] = \"批量删除\";\r\n                item['url'] = cUrl + \"/batchDrop\";\r\n                item['data'] = data;\r\n                item['confirm'] = true;\r\n\r\n                // 执行方法\r\n                common.batchFunc(item, function () {\r\n                    _tableIns.reload();\r\n                });\r\n                break;\r\n            }\r\n            case \"batchCache\": {\r\n                // 批量重置缓存\r\n\r\n                // 方法参数\r\n                var item = {};\r\n                item['title'] = \"批量重置缓存\";\r\n                item['url'] = cUrl + \"/batchCache\";\r\n                item['data'] = data;\r\n                item['confirm'] = true;\r\n\r\n                // 执行方法\r\n                common.batchFunc(item, function () {\r\n                    _tableIns.reload();\r\n                });\r\n                break;\r\n            }\r\n            case \"batchEnable\": {\r\n                // 批量启用\r\n\r\n                // 方法参数\r\n                var item = {};\r\n                item['title'] = \"批量启用状态\";\r\n                item['url'] = cUrl + \"/batchStatus\";\r\n                item['param'] = param;\r\n                item['data'] = data;\r\n                item['form'] = \"submitForm\";\r\n                item['confirm'] = true;\r\n                item['show_tips'] = \"处理中...\";\r\n\r\n                // 执行方法\r\n                common.batchFunc(item, function () {\r\n                    _tableIns.reload();\r\n                });\r\n                break;\r\n            }\r\n            case \"batchDisable\": {\r\n                // 批量禁用\r\n\r\n                // 方法参数\r\n                var item = {};\r\n                item['title'] = \"批量禁用状态\";\r\n                item['url'] = cUrl + \"/batchStatus\";\r\n                item['param'] = param;\r\n                item['data'] = data;\r\n                item['confirm'] = true;\r\n\r\n                // 执行方法\r\n                common.batchFunc(item, function () {\r\n                    _tableIns.reload();\r\n                });\r\n                break;\r\n            }\r\n            case \"export\": {\r\n                // 导出Excel\r\n                layer.msg(\"导出\");\r\n                location.href = cUrl + \"/btn\" + layEvent.substring(0, 1).toUpperCase() + layEvent.substring(1);\r\n                break;\r\n            }\r\n            case \"import\": {\r\n                // 导入Excel\r\n                common.uploadFile('import', function (res, isSucc) {\r\n                    // TODO...\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n    //关闭自身\r\n    window.formClose = function () {\r\n        // 先得到当前iframe层的索引\r\n        var index = parent.layer.getFrameIndex(window.name);\r\n        // 再执行关闭\r\n        parent.layer.close(index);\r\n    };\r\n\r\n    /**\r\n     * 输入自定义模块(此模块接口是对象)\r\n     */\r\n    exports('func', func);\r\n});\r\n\n\n//# sourceURL=webpack:///./src/js/func.js?");

/***/ })

/******/ });