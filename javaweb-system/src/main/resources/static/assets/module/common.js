/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/common.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/common.js":
/*!***********************!*\
  !*** ./src/common.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./js/common.js */ \"./src/js/common.js\");\n\n//# sourceURL=webpack:///./src/common.js?");

/***/ }),

/***/ "./src/js/common.js":
/*!**************************!*\
  !*** ./src/js/common.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * 常用方法封装【基础类】\r\n * @author 牧羊人\r\n * @date 2018/7/13\r\n */\r\nlayui.define(['form', 'layer', 'laydate', 'upload', 'element', 'base'], function (exports) {\r\n    \"use strict\";\r\n\r\n    // 变量声明\r\n    var form = layui.form,\r\n        layer = parent.layer === undefined ? layui.layer : top.layer,\r\n        laydate = layui.laydate,\r\n        upload = layui.upload,\r\n        element = layui.element,\r\n        base = layui.base,\r\n        $ = layui.$;\r\n\r\n    /**\r\n     * 自定义模块接口对象\r\n     */\r\n    var active = {\r\n        /**\r\n         * 添加、编辑公共函数\r\n         */\r\n        edit: function (title, id = 0, width = 0, height = 0, param = []) {\r\n\r\n            // 窗口标题\r\n            var titleStr = id > 0 ? \"修改\" : \"新增\";\r\n            if (base.isEmpty(title)) {\r\n                titleStr += '内容';\r\n            } else {\r\n                titleStr += title;\r\n            }\r\n\r\n            // URL逻辑处理\r\n            var url = cUrl + \"/edit?id=\" + id;\r\n            if (Array.isArray(param)) {\r\n                for (var i in param) {\r\n                    url += \"&\" + param[i];\r\n                }\r\n            }\r\n            // 调用内部方法\r\n            active.showWin(titleStr, url, width, height, param);\r\n\r\n        },\r\n        /**\r\n         * 数据详情函数\r\n         */\r\n        detail: function (title, id, width = 0, height = 0) {\r\n            // 调用内部方法\r\n            var url = cUrl + \"/detail?id=\" + id;\r\n            active.showWin(title + \"详情\", url, width, height);\r\n        },\r\n        /**\r\n         * 重置缓存\r\n         */\r\n        cache: function (id) {\r\n            var url = cUrl + \"/cache\";\r\n            active.ajaxPost(url, {\"id\": id}, function (data, res) {\r\n            });\r\n        },\r\n        /**\r\n         * 一键复制\r\n         */\r\n        copy: function (title, id, width = 0, height = 0) {\r\n            var url = cUrl + \"/copy?id=\" + id;\r\n            active.showWin(title + \"复制\", url, width, height);\r\n        },\r\n        /**\r\n         * 删除单条数据函数\r\n         */\r\n        delete: function (id, callback = null) {\r\n            layer.confirm('您确定要删除吗？删除后将无法恢复！', {\r\n                icon: 3,\r\n                skin: 'layer-ext-moon',\r\n                btn: ['确认', '取消'] //按钮\r\n            }, function (index) {\r\n\r\n                // 调用内部方法\r\n                var url = cUrl + \"/delete\";\r\n                active.ajaxGet(url, {\"id\": id}, function (data, flag) {\r\n                    if (callback) {\r\n                        // 关闭弹窗\r\n                        layer.close(index);\r\n                        // 回调\r\n                        callback(data, flag);\r\n                    }\r\n                }, '正在删除。。。');\r\n\r\n            });\r\n\r\n        },\r\n        /**\r\n         * 批量操作方法\r\n         */\r\n        batchFunc: function (option, callback = null) {\r\n            // 基础参数\r\n            var url = option.url,\r\n                title = option.title,\r\n                form = option.form || '',\r\n                confirm = option.confirm || false,\r\n                show_tips = option.show_tips || '处理中...',\r\n                item = option.data || [],\r\n                param = option.param || [];\r\n\r\n            if (item.length == 0) {\r\n                layer.msg(\"请选择数据\", {icon: 5});\r\n                return false;\r\n            }\r\n\r\n            // 选择数据ID\r\n            var ids = [];\r\n            for (var i in item) {\r\n                ids.push(item[i].id);\r\n            }\r\n            // 选择数据ID字符串（逗号‘,’分隔）\r\n            var ids_str = ids.join(\",\");\r\n\r\n            var data = {};\r\n            data['id'] = ids_str;\r\n\r\n            // 自定义参数解析\r\n            if (Array.isArray(param)) {\r\n                for (var i in param) {\r\n                    var subItem = param[i].split('=');\r\n                    data[subItem[0]] = subItem[1];\r\n                }\r\n            }\r\n\r\n            if (confirm) {\r\n                // 弹出确认\r\n                layer.confirm('您确定要【' + title + '】选中的数据吗？', {icon: 3, title: '提示信息'}, function (index) {\r\n                    active.ajaxPost(url, data, callback, show_tips);\r\n                });\r\n            } else {\r\n                // 直接请求\r\n                active.ajaxPost(url, data, callback, show_tips);\r\n            }\r\n\r\n        },\r\n        /**\r\n         * 表单验证函数\r\n         */\r\n        verify: function () {\r\n            form.verify({\r\n                // value：表单的值、item：表单的DOM对象\r\n                required: function (value, item) {\r\n                    var title = $(item).data('title');\r\n                    if (!title) {\r\n                        // 自动获取\r\n                        title = $(item).parents('.layui-inline').find('.layui-form-label').text();\r\n                        if (title.indexOf(\"：\") >= 0) {\r\n                            title = title.substring(0, title.Length - 1);\r\n                        }\r\n                    }\r\n                    // 值为空时提示\r\n                    if (!value) {\r\n                        return $(item).attr('placeholder');\r\n                    }\r\n                }\r\n                , number: [/^[0-9]*$/, '请输入数字']\r\n                , username: function (value, item) {\r\n                    // 特殊字符验证\r\n                    if (!new RegExp(\"^[a-zA-Z0-9_\\u4e00-\\u9fa5\\\\s·]+$\").test(value)) {\r\n                        return title + '不能含有特殊字符';\r\n                    }\r\n                    // 下划线验证\r\n                    if (/(^\\_)|(\\__)|(\\_+$)/.test(value)) {\r\n                        return title + '首尾不能出现下划线\\'_\\'';\r\n                    }\r\n                    // 数字验证\r\n                    if (/^\\d+\\d+\\d$/.test(value)) {\r\n                        return title + '不能全为数字';\r\n                    }\r\n                }\r\n                // 数组的两个值分别代表：[正则匹配、匹配不符时的提示文字]\r\n                , pass: [/^[\\S]{6,12}$/, '密码必须6到12位，且不能出现空格']\r\n            });\r\n        },\r\n        /**\r\n         * 表单提交函数\r\n         */\r\n        submitForm: function (data) {\r\n            // 请求地址\r\n            var url = cUrl;\r\n            var action = $(\"form\").attr(\"action\");\r\n            if (!base.isEmpty(action)) {\r\n                // 自定义网络请求地址\r\n                url = action;\r\n            } else if (data.id != null) {\r\n                // 根据常规表单提交判断是新增还是编辑\r\n                if (data.id == 0) {\r\n                    url += \"/add\";\r\n                } else if (data.id > 0) {\r\n                    url += \"/update\";\r\n                }\r\n            }\r\n            active.ajaxPost(url, data, function (res, success) {\r\n                if (success) {\r\n                    // 延迟0.5秒\r\n                    setTimeout(function () {\r\n                        // 关闭窗体\r\n                        layer.closeAll(\"iframe\");\r\n                        // 刷新父页面\r\n                        parent.location.reload();\r\n                    }, 100);\r\n                    return false;\r\n                } else {\r\n                    // 网络请求异常处理\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 搜索函数\r\n         */\r\n        searchForm: function (table, data, tableList = 'tableList') {\r\n            // 执行重载\r\n            table.reload(tableList, {\r\n                page: {\r\n                    curr: 1\r\n                },\r\n                where: data.field\r\n            });\r\n        },\r\n        /**\r\n         * 初始化日期组件函数\r\n         */\r\n        initDate: function (item, callback = null) {\r\n            if (Array.isArray(item)) {\r\n                for (var i in item) {\r\n                    var subItem = item[i].split('|');\r\n                    if (subItem[2]) {\r\n                        var param = subItem[2].split(',');\r\n                    }\r\n\r\n                    // 日期组件数据重组\r\n                    var options = {};\r\n                    options.elem = \"#\" + subItem[0];\r\n                    options.type = subItem[1];\r\n                    options.theme = 'molv';// 主题颜色[molv,#393D49,grid]\r\n                    options.range = subItem[3] === \"true\" ? true : subItem[3];// 开启左右面板\r\n                    options.calendar = true;// 是否显示公历节日\r\n                    options.show = false;// 默认显示\r\n                    options.position = 'absolute';// [fixed,absolute,static]\r\n                    options.trigger = 'click';// 定义鼠标悬停时弹出控件[click,mouseover]\r\n                    options.btns = ['clear', 'now', 'confirm'];// 工具按钮 默认值['clear', 'now', 'confirm']\r\n                    options.mark = {'0-06-25': \"生日\", '0-12-31': \"跨年\"};// 自定义标注重要日子\r\n                    // 控件在打开时触发，回调返回一个参数\r\n                    options.ready = function (date) {\r\n                        // console.log(\"组件面板打开：\" + date);\r\n                    }\r\n                    // 日期时间被切换后的回调\r\n                    options.change = function (value, date, endDate) {\r\n                        // console.log(value); // 得到日期生成的值，如：2017-08-18\r\n                        // console.log(date); // 得到日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0}\r\n                        // console.log(endDate); // 得结束的日期时间对象，开启范围选择（range: true）才会返回。对象成员同上。\r\n                    }\r\n                    // 控件选择完毕后的回调\r\n                    options.done = function (value, date, endDate) {\r\n                        if (callback) {\r\n                            callback(value, date);\r\n                        }\r\n                    }\r\n                    if (param) {\r\n                        // 最小值\r\n                        var minV = param[0];\r\n                        if (minV) {\r\n                            var isNum = !isNaN(minV);\r\n                            if (isNum) {\r\n                                // 数字\r\n                                options.min = parseInt(minV);\r\n                            } else {\r\n                                // 非数字\r\n                                options.min = minV;\r\n                            }\r\n                        }\r\n                        // 最大值\r\n                        var maxV = param[1];\r\n                        if (maxV) {\r\n                            var isNum2 = !isNaN(maxV);\r\n                            if (isNum2) {\r\n                                // 数字\r\n                                options.max = parseInt(maxV);\r\n                            } else {\r\n                                // 非数字\r\n                                options.max = maxV;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // 日期选择组件\r\n                    laydate.render(options);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * 弹出窗体函数\r\n         */\r\n        showWin: function (title, url, width = 0, height = 0, param = [], type = 2, btn = [], callback = null) {\r\n            var index = layui.layer.open({\r\n                title: title,\r\n                type: type,\r\n                area: [width + \"px\", height + \"px\"],\r\n                content: url,\r\n                // closeBtn: false,\r\n                shadeClose: true,// 点击遮罩关闭\r\n                shade: 0.4,\r\n                // maxmin: true, // 开启最大化最小化按钮\r\n                // skin: 'layui-layer-rim', // 加上边框\r\n                // skin: 'layui-layer-molv', // 加上边框\r\n                skin: 'layui-layer-admin',\r\n                // btn: btn,\r\n                // btnAlign: 'c',\r\n                success: function (layero, index) {\r\n\r\n                    // 窗体传值【支持多值传递】\r\n                    if (Array.isArray(param)) {\r\n                        for (var i in param) {\r\n                            var item = param[i].split('=');\r\n                            // console.log(\"传值：\" + item[0] + \",\" + item[1]);\r\n                            var body = layui.layer.getChildFrame('body', index);\r\n                            body.find(\"#\" + item[0]).val(item[1]);\r\n                        }\r\n                    }\r\n\r\n                    // 回调函数\r\n                    if (callback) {\r\n                        callback(layero, index);\r\n                    }\r\n\r\n                    // // 延迟0.5秒\r\n                    // setTimeout(function () {\r\n                    //     layer.tips('点击此处返回列表', '.layui-layer-setwin .layui-layer-close', {\r\n                    //         tips: 3\r\n                    //     });\r\n                    // }, 500);\r\n\r\n                },\r\n                end: function () {\r\n                    // 加载结束\r\n                }\r\n            });\r\n\r\n            if (width == 0) {\r\n                // 全屏设置\r\n                layui.layer.full(index);\r\n                $(window).on(\"resize\", function () {\r\n                    layui.layer.full(index);\r\n                });\r\n            }\r\n\r\n        },\r\n        /**\r\n         * 网络请求函数(POST)\r\n         */\r\n        ajaxPost: function (url, data, callback = null, msg = '处理中,请稍后...') {\r\n            var index = null;\r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: url,\r\n                data: JSON.stringify(data),\r\n                contentType: \"application/json\",\r\n                dataType: \"json\",\r\n                beforeSend: function () {\r\n                    index = layer.msg(msg, {\r\n                        icon: 16\r\n                        , shade: 0.01\r\n                        , time: 0\r\n                    });\r\n                },\r\n                success: function (res) {\r\n                    if (res.code == 0) {\r\n                        //0.5秒后关闭\r\n                        layer.msg(res.msg, {icon: 1, time: 500}, function () {\r\n                            layer.close(index);\r\n                            if (callback) {\r\n                                callback(data, true);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        layer.close(index);\r\n                        layer.msg(res.msg, {icon: 5});\r\n                        return false;\r\n                    }\r\n                },\r\n                error: function () {\r\n                    layer.close(index);\r\n                    layer.msg(\"AJAX请求异常\");\r\n                    if (callback) {\r\n                        callback(data, false);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 网络请求函数(POST)\r\n         */\r\n        ajaxGet: function (url, data, callback = null, msg = '处理中,请稍后...') {\r\n            var index = null;\r\n            $.ajax({\r\n                type: \"GET\",\r\n                url: url,\r\n                data: data,\r\n                contentType: \"application/json\",\r\n                dataType: \"json\",\r\n                beforeSend: function () {\r\n                    index = layer.msg(msg, {\r\n                        icon: 16\r\n                        , shade: 0.01\r\n                        , time: 0\r\n                    });\r\n                },\r\n                success: function (res) {\r\n                    if (res.code == 0) {\r\n                        //0.5秒后关闭\r\n                        layer.msg(res.msg, {icon: 1, time: 500}, function () {\r\n                            layer.close(index);\r\n                            if (callback) {\r\n                                callback(data, true);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        layer.msg(res.msg, {icon: 5});\r\n                        return false;\r\n                    }\r\n                },\r\n                error: function () {\r\n                    layer.msg(\"AJAX请求异常\");\r\n                    if (callback) {\r\n                        callback(data, false);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * 开关\r\n         */\r\n        formSwitch: function (name, url = '', callback = null) {\r\n            form.on('switch(' + name + ')', function (obj) {\r\n                // 开关的值\r\n                var value = this.checked ? '1' : '2';\r\n\r\n                // URL自定义\r\n                if (base.isEmpty(url)) {\r\n                    url = cUrl + \"/set\" + name.substring(0, 1).toUpperCase() + name.substring(1);\r\n                }\r\n\r\n                // JSON数据\r\n                var json_data = {};\r\n                json_data['id'] = this.value;\r\n                json_data[name] = value;\r\n                // JSON字符串\r\n                var json_str = JSON.stringify(json_data);\r\n                // JSON数据\r\n                var json = JSON.parse(json_str);\r\n                // 发起POST请求\r\n                active.ajaxPost(url, json_data, function (data, res) {\r\n                    if (callback) {\r\n                        callback(data, res);\r\n                    }\r\n                });\r\n\r\n            });\r\n        },\r\n        /**\r\n         * 上传文件\r\n         */\r\n        uploadFile: function (elem_id, callback = null, url = '', exts = 'xls|xlsx', size = 10240, data = {}) {\r\n            if (base.isEmpty(url)) {\r\n                url = cUrl + \"/uploadFile\";\r\n            }\r\n            upload.render({\r\n                elem: '#' + elem_id\r\n                , url: url\r\n                , auto: false\r\n                , exts: exts\r\n                , accept: 'file' // 允许上传的文件类型\r\n                , size: size // 最大允许上传的文件大小\r\n                , method: 'post' // 可选项。HTTP类型，默认post\r\n                , data: data // 可选项。额外的参数，如：{id: 123, abc: 'xxx'}\r\n                , before: function (obj) {\r\n                    // 预读本地文件\r\n                    layer.msg('上传并处理中。。。', {\r\n                        icon: 16\r\n                        , shade: 0.01\r\n                        , time: 0\r\n                    });\r\n                }\r\n                , done: function (res) {\r\n                    // 上传完毕回调\r\n\r\n                    // 关闭所有弹窗\r\n                    layer.closeAll();\r\n\r\n                    // 上传成功\r\n                    if (res.code == 0) {\r\n                        layer.alert(res.msg, {\r\n                            title: \"上传反馈\"\r\n                            , skin: 'layui-layer-molv' //样式类名  自定义样式\r\n                            , closeBtn: 1    // 是否显示关闭按钮\r\n                            , anim: 0 //动画类型\r\n                            , btn: ['确定', '取消'] //按钮\r\n                            , icon: 6    // icon\r\n                            , yes: function () {\r\n                                // 回调\r\n                                if (callback) {\r\n                                    callback(res, true);\r\n                                }\r\n                            }\r\n                            , btn2: function () {\r\n                            }\r\n                        });\r\n                    } else {\r\n                        layer.msg(res.msg, {icon: 5});\r\n                    }\r\n                    return false;\r\n                }\r\n                , error: function () {\r\n                    // 请求异常回调\r\n                    return layer.msg('数据请求异常');\r\n                }\r\n            });\r\n        },\r\n    };\r\n\r\n    /**\r\n     * 输入自定义模块(此模块接口是对象)\r\n     */\r\n    exports('common', active);\r\n});\n\n//# sourceURL=webpack:///./src/js/common.js?");

/***/ })

/******/ });